#https://leetcode-cn.com/problems/two-sum/
#注意点：负数、相同的数 比如3+3 = 6,一正一负
#seasons = ['Spring', 'Summer', 'Fall', 'Winter']
#>>> list(enumerate(seasons))
#[(0, 'Spring'), (1, 'Summer'), (2, 'Fall'), (3, 'Winter')]

'''
给定一个整数数组 nums 和一个目标值 target，请你在该数组中找出和为目标值的那 两个 整数，并返回他们的数组下标。

你可以假设每种输入只会对应一个答案。但是，数组中同一个元素不能使用两遍。

 

示例:

给定 nums = [2, 7, 11, 15], target = 9

因为 nums[0] + nums[1] = 2 + 7 = 9
所以返回 [0, 1]

来源：力扣（LeetCode）
链接：https://leetcode-cn.com/problems/two-sum
著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。
'''
'''
class Solution:
    def twoSum(self, nums, target: int):
        res_index = 0
        res_list = []
        for i in range(len(nums)):
            if res_list != []:
                break
            res = target - nums[i]
            if res >= 0:
                if res in nums:
                    res_index = nums.index(res)#找出第一个相同的数
                    if res_index != i:
                        res_list = [i, res_index]
                        break
                    else:
                        if res in nums[i+1:]:
                            res_index = nums[i+1:].index(res) + i + 1
                            res_list = [i, res_index]
                            break
            else:
                return [0]
        if res_index == 0:
            return [0]
        return res_list
'''
class Solution:
    def twoSum(self, nums, target: int):
        for i in range(len(nums)):
            nums_new = nums[i+1:]
            for j in range(len(nums_new)):
                if nums[i] + nums_new[j] == target:
                    res_list = [i, j + i + 1]
        return res_list
#使用字典，正好去重
    def twoSum1(self, nums, target):
        hashmap = {}
        for ind, num in enumerate(nums):
            hashmap[num] = ind
        for i, num in enumerate(nums):
            j = hashmap.get(target - num)
            if j is not None and i != j:
                return [i, j]

if __name__ == "__main__":
    A = Solution()
    B = A.twoSum1([3,3],6)
    C = A.twoSum([3,3],6)
    print(B)
    print(C)
